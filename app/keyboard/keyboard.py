from app.functionality.user.functions import *
from telegram.ext import CallbackQueryHandler
from app.functionality.admin.posting import *
from app.functionality.admin.subscription import public, active_public
from app.functionality.admin.accesses import show_admin
from app.functionality.admin.analytics import users, emails, views
from app.functionality.admin.functions import analytic_menu, personal_menu, admin_menu
from app.functionality.user.history import history_requests, history_men, delete_history
from app.functionality.user.callback import callback
from app.functionality.admin.switcher import switch, enable_start, disable_start


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: CallbackContext, check_admin=True):
    user_id = update.effective_chat.id
    text = update.message.text
    state = context.user_data.get('state')

    if check_admin and await is_admin(user_id):
        if text == "–ü–æ—Å—ÇüöÄ":
            await adv(update, context)
        elif text == "–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç‚úèÔ∏è":
            return conv_handler
        elif text == "–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç‚ùå":
            await delete_message(update, context)
        elif text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Åüåç":
            await send_message_to_all_users(update, context)
        elif text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—éüëà":
            await admin_start(update, context)
        elif text == "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Çüîç":
            await show_post_with_button(update, context)
        elif text == "–ü–æ–¥–ø–∏—Å–∫–∏ü§ñ":
            await public(update, context)
        elif text == "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞–±–ª–∏–∫–∏‚úÖ":
            await active_public(update, context)
        elif text == "–ù–∞–∑–∞–¥üëà":
            await admin_start(update, context)
        elif text == "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞üìÇ":
            await analytic_menu(update, context)
        elif text == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ü§ñ":
            await users(update, context)
        elif text == "EMAILüìß":
            await emails(update, context)
        elif text == "–ü—Ä–æ—Å–º–æ—Ç—Ä—ãüëÅÔ∏è":
            await views(update, context)
        elif text == "–î–æ—Å—Ç—É–ø—ãüîí":
            await admin_menu(update, context)
        elif text == "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤‚úÖ":
            await show_admin(update, context)
        elif text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞üß†":
            await callback(update, context)
        elif text == "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è‚ùì":
            await start(update, context)
        elif state == 'AWAITING_PRODUCT_NAME':
            await analyze_product(update, context)
        elif text == "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤üìí":
            await history_men(update, context)
        elif text == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é‚Äçü§ì":
            await personal_menu(update, context)
        elif text == "–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—éüëÄ":
            await history_requests(update, context)
        elif text == "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é‚ùå":
            await delete_history(update, context)
        elif text == "–ù–∞–∑–∞–¥üëà":
            await start_menu(update, context)
        elif text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å‚ôªÔ∏è":
            await subscription(update, context)
        elif text == "–¢—É–º–±–ª–µ—Ä‚ö†Ô∏è":
            await switch(update, context)
        elif text == "–í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞‚úÖ":
            await enable_start(update, context)
        elif text == "–û—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞‚õî":
            await disable_start(update, context)
    else:
        if not context.bot_data.get('is_bot_active', True):
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω.")
            return
        else:
            if text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞üß†":
                await callback(update, context)
            elif text == "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è‚ùì":
                await start(update, context)
            elif state == 'AWAITING_PRODUCT_NAME':
                await analyze_product(update, context)
            elif text == "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤üìí":
                await history_men(update, context)
            elif text == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é‚Äçü§ì":
                await personal_menu(update, context)
            elif text == "–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—éüëÄ":
                await history_requests(update, context)
            elif text == "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é‚ùå":
                await delete_history(update, context)
            elif text == "–ù–∞–∑–∞–¥üëà":
                await start_menu(update, context)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
async def handle_callback_query(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "1":
        await request_product_name(update, context)
    elif data == "2":
        await start(update, context)


callback_query_handler = CallbackQueryHandler(handle_callback_query)
