from app.functionality.user.functions import *
from app.functionality.admin.functions import *
from telegram.ext import CallbackQueryHandler
from app.functionality.admin.functions import personal_menu


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: CallbackContext):
    text = update.message.text
    state = context.user_data.get('state')

    if text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–πüìû":
        await callback(update, context)
    elif text == "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è‚ùì":
        await start(update, context)
    elif text == "–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞üîé":
        await request_product_name(update, context)
    elif state == 'AWAITING_PRODUCT_NAME':
        await analyze_product(update, context)
    elif text == "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤üìí":
        await history_requests(update, context)
    elif text == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é‚Äçü§ì":
        await personal_menu(update, context)
    elif text == "–ü–æ—Å—ÇüöÄ":
        await adv(update, context)
    elif text == "–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç‚úèÔ∏è":
        return conv_handler
    elif text == "–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç‚ùå":
        await delete_message(update, context)
    elif text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Åüåç":
        await send_message_to_all_users(update, context)
    elif text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—éüëà":
        await admin_start(update, context)
    elif text == "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Çüîç":
        await show_post_with_button(update, context)
    elif text == "–ü–æ–¥–ø–∏—Å–∫–∏ü§ñ":
        await public(update, context)
    elif text == "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞–±–ª–∏–∫–∏‚úÖ":
        await active_public(update, context)
    elif text == '–ü–∞–±–ª–∏–∫':
        await create_pub(update, context)
    elif text == "–ù–∞–∑–∞–¥üëà":
        await admin_start(update, context)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
async def handle_callback_query(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "1":
        await request_product_name(update, context)
    elif data == "2":
        await start(update, context)


callback_query_handler = CallbackQueryHandler(handle_callback_query)
