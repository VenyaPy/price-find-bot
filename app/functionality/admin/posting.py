from telegram import (Update,
                      ReplyKeyboardMarkup,
                      InlineKeyboardMarkup)
from app.keyboard.inline import *
from telegram.ext import (CallbackContext,
                          CommandHandler,
                          MessageHandler,
                          filters,
                          ConversationHandler)
from db import (get_all_user_chat_ids)



# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —á–µ—Ä–µ–∑ ConversationHandler
TEXT_INPUT, PHOTO_INPUT, BUTTON_INFO = range(3)


# –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞—é—â–∞—è 5 –∫–Ω–æ–ø–æ–∫: –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç, –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å, —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è
async def adv(update: Update, context: CallbackContext):
    reply_mark = ReplyKeyboardMarkup(advertising_menu, resize_keyboard=True, one_time_keyboard=False)
    await context.bot.send_photo(chat_id=update.effective_chat.id,
                                 photo="https://imgur.com/aCIOb44")
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–ú–µ–Ω—é –ø–æ—Å—Ç–∏–Ω–≥–∞\n–¢—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–ºüëá",
                                   reply_markup=reply_mark)



# –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:
async def start_add_message(update: Update, context: CallbackContext):
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:')
    return TEXT_INPUT


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ
async def receive_message_text(update: Update, context: CallbackContext):
    context.user_data['post_text'] = update.message.text
    await update.message.reply_text('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞:')
    return PHOTO_INPUT


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ç–æ –∏ –∑–∞–ø—Ä–æ—Å url –∫–Ω–æ–ø–∫–∏
async def receive_photo(update: Update, context: CallbackContext):
    photo_file = await update.message.photo[-1].get_file()
    context.user_data['post_photo_file_id'] = photo_file.file_id
    await update.message.reply_text('–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏ URL —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:')

    return BUTTON_INFO


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
async def receive_button_info(update: Update, context: CallbackContext):
    try:
        text, url = update.message.text.split(' ', 1)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –∏ URL —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø—Ä–æ–±–µ–ª–æ–º
        context.user_data['button_text'] = text
        context.user_data['button_url'] = url
        await update.message.reply_text('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–Ω–æ–ø–∫–µ –ø–æ–ª—É—á–µ–Ω–∞.')
    except ValueError:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏ URL –¥–ª—è –∫–Ω–æ–ø–∫–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –ø—Ä–æ–±–µ–ª–æ–º.')
        return BUTTON_INFO
    return ConversationHandler.END


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏
async def show_post_with_button(update: Update, context: CallbackContext):
    if 'post_text' in context.user_data and 'post_photo_file_id' in context.user_data and 'button_text' in context.user_data and 'button_url' in context.user_data:
        keyboard = [[InlineKeyboardButton(context.user_data['button_text'], url=context.user_data['button_url'])]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_photo(chat_id=update.effective_chat.id,
                                     photo=context.user_data['post_photo_file_id'],
                                     caption=context.user_data['post_text'],
                                     reply_markup=reply_markup)
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–æ–ø–∫–µ")


# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def send_message_to_all_users(update: Update, context: CallbackContext):
    chat_ids = get_all_user_chat_ids()
    if 'post_text' in context.user_data and 'post_photo_file_id' in context.user_data and 'button_text' in context.user_data and 'button_url' in context.user_data:
        for chat_id in chat_ids:
            keyboard = [[InlineKeyboardButton(context.user_data['button_text'], url=context.user_data['button_url'])]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_photo(chat_id=chat_id,
                                         photo=context.user_data['post_photo_file_id'],
                                         caption=context.user_data['post_text'],
                                         reply_markup=reply_markup)
    else:
        await update.message.reply_text('–ù–µ—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')


# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
async def delete_message(update, context):
    if 'post_text' in context.user_data and 'post_photo_file_id' in context.user_data:
        del context.user_data['post_text']
        del context.user_data['post_photo_file_id']
        del context.user_data['button_text']
        del context.user_data['button_url']
        await update.message.reply_text('–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω.')
        return ConversationHandler.END
    else:
        await update.message.reply_text('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.')


# –°–æ–∑–¥–∞–Ω–∏–µ ConversationHandler –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex('–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç‚úèÔ∏è'), start_add_message)],
    states={
        TEXT_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_message_text)],
        PHOTO_INPUT: [MessageHandler(filters.PHOTO, receive_photo)],
        BUTTON_INFO: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_button_info)]
    },
    fallbacks=[CommandHandler('cancel', delete_message)]
)