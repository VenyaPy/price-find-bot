from telegram import (Update,
                      ReplyKeyboardMarkup)
from app.keyboard.inline import pub_admin
from telegram.ext import (CallbackContext,
                          CommandHandler,
                          MessageHandler,
                          filters,
                          ConversationHandler)
from db import (add_public,
                show_public,
                delete_public)


ID_PUB = 1
URL_PUB = 2


async def public(update: Update, context: CallbackContext):
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è pub_admin —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≥–¥–µ-—Ç–æ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ
    reply_markup = ReplyKeyboardMarkup(pub_admin, resize_keyboard=True, one_time_keyboard=False)
    user_id = update.effective_chat.id
    await context.bot.send_photo(chat_id=update.effective_chat.id,
                                 photo="https://imgur.com/OsWwFTd")
    await context.bot.send_message(text="–†–µ–∫–ª–∞–º–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫\n"
                                        "–î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –ø–∞–±–ª–∏–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞üëá",
                                   chat_id=user_id,
                                   reply_markup=reply_markup)


async def start_add_public(update: Update, context: CallbackContext):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–∞–±–ª–∏–∫–∞")
    return ID_PUB


async def add_pub_url(update: Update, context: CallbackContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–µ—Å–µ–¥—ã
    context.user_data['pub_id'] = update.message.text.strip()
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ URL –ø–∞–±–ª–∏–∫–∞")
    return URL_PUB


async def add_pub(update: Update, context: CallbackContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ—Å–µ–¥—ã
    pub_id = context.user_data.get('pub_id')
    # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pub_url = update.message.text.strip()
    if not pub_url:
        await update.message.reply_text("URL –ø–∞–±–ª–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return URL_PUB
    try:
        add_public(pub_id, pub_url)
        await update.message.reply_text("–ü–∞–±–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞–±–ª–∏–∫–∞: {e}")
    return ConversationHandler.END


async def cancel_dd(update: Update, context: CallbackContext):
    await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞–±–ª–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥


add_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex('–î–æ–±–∞–≤–∏—Ç—å –ø–∞–±–ª–∏–∫‚ùó'), start_add_public)],
    states={
        ID_PUB: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_pub_url)],
        URL_PUB: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_pub)],
    },
    fallbacks=[CommandHandler('cancel', cancel_dd)],
)


async def active_public(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    mes = show_public()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä (id, id_public)
    if not mes:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ —Å–ø–∏—Å–æ–∫
        await context.bot.send_message(chat_id=chat_id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –µ—â—ë –Ω–µ—Ç –ø–∞–±–ª–∏–∫–æ–≤")
    else:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –≤ —Å—Ç—Ä–æ–∫—É, –≥–¥–µ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ "idX - URL"
        publics_info = "\n".join(f"id{public_id[0]} - {public_id[1]}" for public_id in mes)
        await context.bot.send_message(chat_id=chat_id, text=publics_info)


DELETE = 1  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è


async def delete_publics(update: Update, context: CallbackContext):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ ID –ø–∞–±–ª–∏–∫–∞ –¥–ª—è –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
    return DELETE


async def delete(update: Update, context: CallbackContext):
    pub_id = update.message.text
    try:
        id_to_delete = int(pub_id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        delete_public(id_to_delete)
        await update.message.reply_text("–ü–∞–±–ª–∏–∫ —É–¥–∞–ª–µ–Ω.")
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–±–ª–∏–∫–∞: {e}")


async def cancel_del(update: Update, context: CallbackContext):
    await update.message.reply_text("–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–±–ª–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


del_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex('–£–¥–∞–ª–∏—Ç—å –ø–∞–±–ª–∏–∫‚õî'), delete_publics)],
    states={
        DELETE: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete)],
    },
    fallbacks=[CommandHandler('cancel', cancel_del)]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É /cancel
)