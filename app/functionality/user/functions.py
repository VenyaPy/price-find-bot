import asyncio
from concurrent.futures import ThreadPoolExecutor
from telegram import Update, InputMediaPhoto, ReplyKeyboardMarkup, InlineKeyboardMarkup
from telegram.ext import (CallbackContext,
                          MessageHandler,
                          filters,
                          ConversationHandler)
from app.scrap.scraperyandex import WebScraper
import re
from db import save_user, save_requests, check_email, save_user_email, find_public, save_count, is_admin
from app.functionality.admin.functions import admin_start
from app.keyboard.inline import *
import time


async def start_menu(update: Update, context: CallbackContext, check_admin=True):
    chat_id = update.effective_chat.id
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await context.bot.send_message(reply_markup=reply_markup,
                                   chat_id=chat_id,
                                   text="–í—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é:")


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è /start
async def start(update: Update, context: CallbackContext, check_admin=True):
    user_id = update.effective_chat.id
    save_user(user_id)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±–æ—Ç–∞ (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–¥–º–∏–Ω –≤ —Å–≤–æ–µ–π –ø–∞–Ω–µ–ª–∏ switcher)
    if not context.bot_data.get('is_bot_active', True):
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω.")
        return

    # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã start
    if check_admin and await is_admin(user_id):
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!üñêÔ∏è")
        await admin_start(update, context)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–π –ª–æ–≥–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    else:
        publics = await find_public()  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–±–ª–∏–∫–æ–≤
        subscribed = True
        for public in publics:
            chat_id = public['id_public']
            try:
                status = await context.bot.get_chat_member(chat_id=chat_id, user_id=user_id)
                if status.status not in ['creator', 'administrator', 'member']:
                    subscribed = False
                    break
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –ø–∞–±–ª–∏–∫ {chat_id}: {e}")
                subscribed = False
                break

        if subscribed:
            await main_start(update, context)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ —Å—Ç–∞—Ä—Ç–∞
        else:
            await subscription(update, context)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
async def generate_start(context: CallbackContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–±–ª–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    publics = await find_public()
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard_publics = [
        [InlineKeyboardButton(text=f"–ü–æ–¥–ø–∏—à–∏—Å—åüëà", url=public['url'])]
        for public in publics
    ]
    return InlineKeyboardMarkup(keyboard_publics)


# –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–∞–±–ª–∏–∫–∏
async def subscription(update: Update, context: CallbackContext):
    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
    reply_markup = await generate_start(context)
    await update.message.reply_text(
        text="–ü—Ä–∏–≤–µ—Ç! –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –ø–∞–±–ª–∏–∫–∏, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞üòâ",
        reply_markup=reply_markup
    )


async def main_start(update: Update, context: CallbackContext):
    txt = ("–ü—Ä–∏–≤–µ—Ç ü§ö\n\n–Ø ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∞–Ω–∞–ª–∏–∑–µ —Ü–µ–Ω –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö!"
            "\n\n–î–∞–≤–∞–π –ø–æ–∫–∞–∂—É, –∫–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è üëá")
    await context.bot.send_message(chat_id=update.effective_chat.id, text=txt)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–ª—å–±–æ–º–∞
    media_group = [
        InputMediaPhoto('https://i.imgur.com/rDXKI9X.jpeg'),
        InputMediaPhoto('https://i.imgur.com/0qgWiNS.jpeg'),
        InputMediaPhoto('https://i.imgur.com/UKhgEuY.jpeg'),
        InputMediaPhoto('https://i.imgur.com/Dv5OIRp.jpeg'),
        InputMediaPhoto('https://i.imgur.com/nIWPAS8.jpeg')
    ]

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª—å–±–æ–º–∞
    await context.bot.send_media_group(chat_id=update.effective_chat.id, media=media_group)
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É:",
                                   reply_markup=reply_markup)


executor = ThreadPoolExecutor(10)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
AWAITING_EMAIL, AWAITING_PRODUCT_NAME = range(2)


async def start_email(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_chat.id
    if await check_email(user_id):
        await request_product_name(update, context)
        return AWAITING_PRODUCT_NAME
    else:
        await update.message.reply_text("üëÆ‚Äç‚ôÇÔ∏è–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π EMAIL:\n\n"
                                        "1. –í–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ "
                                        "–¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –Ω–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω —Ç—Ä–µ—Ç—å–∏–º "
                                        "–ª–∏—Ü–∞–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Ü–µ–ª—è—Ö.\n"
                                        "2. –ú—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—É—é –ø–æ—á—Ç—É (—Å–ø–∞–º). "
                                        "–í–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è "
                                        "—Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.\n"
                                        "3. –ú—ã —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥–∏–º –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ "
                                        "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—à–∏–º–∏ –ø–æ–ª–∏—Ç–∏–∫–∞–º–∏ "
                                        "–∏ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –æ –∑–∞—â–∏—Ç–µ –¥–∞–Ω–Ω—ã—Ö.\n\n–í–≤–µ–¥–∏—Ç–µ EMAIL –Ω–∏–∂–µüëá")
        return AWAITING_EMAIL


async def save_email(update: Update, context: CallbackContext) -> int:
    email = update.message.text
    user_id = update.effective_chat.id
    await save_user_email(user_id, email)
    # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è email, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
    return AWAITING_PRODUCT_NAME


async def request_product_name(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
    return AWAITING_PRODUCT_NAME


# –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –∫–Ω–æ–ø–∫–æ–π –ê–ù–ê–õ–ò–ó –¢–û–í–ê–†–ê
async def analyze_product(update: Update, context: CallbackContext) -> int:
    if not context.bot_data.get('is_bot_active', True):
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω.")
        return

    product_name = update.message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, —É–¥–∞–ª—è—è –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    user_id = update.effective_chat.id
    chat_id = update.effective_chat.id

    # –ó–∞–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    save_requests(user_id, product_name)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
    await save_count()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    photo_message = await context.bot.send_photo(chat_id=chat_id, photo="https://imgur.com/G1zON7g")
    text_message = await context.bot.send_message(chat_id, "–û–∂–∏–¥–∞–π—Ç–µ. –ò–¥—ë—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω...\n"
                                                           "–û–±—ã—á–Ω–æ —ç—Ç–æ –Ω–µ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ 10-15 —Å–µ–∫—É–Ω–¥üòâ")

    scraper = WebScraper()
    loop = asyncio.get_event_loop()
    results = await loop.run_in_executor(None, lambda: perform_parsing(scraper, product_name))

    seen_stores = set()
    unique_results = []
    for store_name, price, link in results:
        if store_name not in seen_stores:
            unique_results.append((store_name, price, link))
            seen_stores.add(store_name)

    response_text = ""
    for index, (store_name, price, link) in enumerate(unique_results, start=1):
        formatted_store_name = store_name.title() if not store_name.isupper() else store_name
        price_numeric = int(re.sub(r'\D', '', price))
        price_formatted = f"{price_numeric:,.0f}".replace(",", ".").strip() + " ‚ÇΩ"
        response_text += f"{index}. {formatted_store_name}: <a href='{link}'>{price_formatted}</a>\n"

    if not response_text:
        response_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä."

    await update.message.reply_text(response_text, parse_mode='HTML', disable_web_page_preview=True)
    await context.bot.delete_message(chat_id=chat_id, message_id=photo_message.message_id)
    await context.bot.delete_message(chat_id=chat_id, message_id=text_message.message_id)
    return ConversationHandler.END


analyt_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞ü§ñ'), start_email)],
        states={
            AWAITING_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_email)],
            AWAITING_PRODUCT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, analyze_product)],
        },
        fallbacks=[],
    )


# –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
def perform_parsing(scraper, product_name):
    scraper.open_page('https://market.yandex.ru/')
    scraper.search_product(product_name)
    time.sleep(5)  # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    results = scraper.find_products()
    scraper.close_browser()

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
    filtered_results = [
        (store_name, price, link)
        for store_name, price, link in results
        if price and link and '–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' not in price and '–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' not in link
    ]

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Ü–µ–Ω–µ
    sorted_results = sorted(filtered_results,
                            key=lambda x: int(re.sub(r'\D', '', x[1])) if re.sub(r'\D', '', x[1]).isdigit() else float(
                                'inf'))

    return sorted_results


