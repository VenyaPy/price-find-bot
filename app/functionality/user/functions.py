import asyncio
from concurrent.futures import ThreadPoolExecutor
from telegram import Update, InputMediaPhoto, ReplyKeyboardMarkup, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from app.scrap.ozon import WebScraper
from app.scrap.wb import WebBrowser
from app.scrap.dns import DNS
from app.scrap.mvideo import Mvideo
import re
from db import save_user, save_requests, history, check_email, save_user_email
from config import admin
from app.functionality.admin.functions import admin_start
from app.keyboard.inline import *


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
async def start(update: Update, context: CallbackContext, check_admin=True):
    user_id = update.effective_chat.id
    save_user(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞—Ö–æ–¥—è—â–µ–≥–æ—Å—è –≤ config
    if check_admin and user_id in admin:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
        await admin_start(update, context)
    else:
        txt = ("–ü—Ä–∏–≤–µ—Ç ü§ö\n\n–Ø ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∞–Ω–∞–ª–∏–∑–µ —Ü–µ–Ω –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö,"
               " –≤–∫–ª—é—á–∞—è Ozon, Wildberries, DNS –∏ –¥—Ä—É–≥–∏–µ!"
               "\n\n–î–∞–≤–∞–π –ø–æ–∫–∞–∂—É, –∫–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è üëá")
        await context.bot.send_message(chat_id=update.effective_chat.id, text=txt)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–ª—å–±–æ–º–∞
        media_group = [
            InputMediaPhoto('https://i.imgur.com/rDXKI9X.jpeg'),
            InputMediaPhoto('https://i.imgur.com/0qgWiNS.jpeg'),
            InputMediaPhoto('https://i.imgur.com/UKhgEuY.jpeg'),
            InputMediaPhoto('https://i.imgur.com/Dv5OIRp.jpeg'),
            InputMediaPhoto('https://i.imgur.com/nIWPAS8.jpeg')
        ]

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª—å–±–æ–º–∞
        await context.bot.send_media_group(chat_id=update.effective_chat.id, media=media_group)
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É:",
                                       reply_markup=reply_markup)


executor = ThreadPoolExecutor(10)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
async def request_product_name(update: Update, context: CallbackContext):
    user_id = update.effective_chat.id
    if await check_email(user_id):
        if update.callback_query:
            query = update.callback_query
            chat_id = query.message.chat_id
            message = await context.bot.send_message(chat_id=chat_id, text="–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
        else:
            message = await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
        context.user_data['state'] = 'AWAITING_PRODUCT_NAME'
        context.user_data['message_id_to_edit'] = message.message_id
    else:
        await update.message.reply_text("–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω–æ - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π email")
        await save_email(update, context)


async def save_email(update: Update, context: CallbackContext):
    email = update.message.text
    user_id = update.effective_chat.id
    await save_user_email(user_id, email)
    await request_product_name(update, context)


# –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –∫–Ω–æ–ø–∫–æ–π –ê–ù–ê–õ–ò–ó –¢–û–í–ê–†–ê
async def analyze_product(update: Update, context: CallbackContext):
    product_name = update.message.text
    user_id = update.effective_chat.id
    save_requests(user_id, new_request=product_name)

    chat_id = update.effective_chat.id
    message_id = context.user_data.get('message_id_to_edit')

    await context.bot.edit_message_text(
        chat_id=chat_id,
        message_id=message_id,
        text="–û–∂–∏–¥–∞–π—Ç–µ. –ò–¥—ë—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω...\n–û–±—ã—á–Ω–æ —ç—Ç–æ –Ω–µ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ 20-30 —Å–µ–∫—É–Ω–¥üòâ"
    )

    # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∞–π—Ç–æ–≤
    scraper = WebScraper()
    scraper_2 = WebBrowser()
    scraper_3 = DNS()
    scraper_4 = Mvideo()

    loop = asyncio.get_running_loop()

    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∞–π—Ç–æ–≤
    tasks = [
        loop.run_in_executor(executor, lambda: perform_parsing(scraper,
                                                               'https://www.ozon.ru/', product_name)),
        loop.run_in_executor(executor, lambda: perform_parsing(scraper_2,
                                                               'https://www.wildberries.ru/', product_name)),
        loop.run_in_executor(executor, lambda: perform_parsing(scraper_3,
                                                               'https://www.dns-shop.ru/', product_name)),
        loop.run_in_executor(executor, lambda: perform_parsing(scraper_4,
                                                               'https://www.mvideo.ru/', product_name))
    ]

    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    results = await asyncio.gather(*tasks)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    sortable_results = []
    for name, (price, url) in zip(["Ozon", "Wildberries", "DNS", "–ú.–í–∏–¥–µ–æ"], results):
        if price != '–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞':
            # –£–¥–∞–ª—è–µ–º –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
            price_number = int(re.sub(r'\D', '', price))
            sortable_results.append((name, price_number, url))

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç –º–µ–Ω—å—à–µ–π —Ü–µ–Ω—ã –∫ –±–æ–ª—å—à–µ–π
    sortable_results.sort(key=lambda x: x[1])

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
    response_text = ""
    for name, price, url in sortable_results:
        formatted_price = f"{price:,}".replace(",", ".") + " ‚ÇΩ"  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
        response_text += f"[–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ {name}: {formatted_price}]({url})\n"  # –ì–∏–ø–ø–µ—Ä—Å—Å—ã–ª–∫–∞

    if not response_text:
        response_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö."

    await update.message.reply_text(response_text, parse_mode='Markdown')
    reply_markup = InlineKeyboardMarkup(keyboardMarkup)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ!\n\n–•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä? –ù–∞–∂–º–∏ ¬´–ê–ù–ê–õ–ò–ó –¢–û–í–ê–†–ê¬ª",
                                    reply_markup=reply_markup)


# –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
def perform_parsing(scraper, url, product_name):
    scraper.open_page(url)
    scraper.search_product(product_name)
    price = scraper.find_price()
    product_url = scraper.show_url()
    scraper.close_browser()
    return price, product_url


# –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑—É—é—â–∞—è –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def history_requests(update: Update, context: CallbackContext):
    user_id = update.effective_chat.id
    chat_id = update.effective_chat.id
    mes = history(user_id)
    requests_list = mes.split(",")
    numbered_requests = "\n".join(f"{i + 1}. {request.strip()}"
                                  for i, request in enumerate(requests_list))
    await context.bot.send_message(text=numbered_requests, chat_id=chat_id)


# –§—É–Ω–∫—Ü–∏—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
async def callback(update: Update, context: CallbackContext) -> None:
    chat_id = update.effective_chat.id
    call_text = '–í–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞? üëå\n–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É —Å—é–¥–∞üëá'
    contact_button = InlineKeyboardMarkup([
        [InlineKeyboardButton(text="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/venyapopov")]
    ])

    await context.bot.send_message(chat_id=chat_id, text=call_text, reply_markup=contact_button)

