import asyncio
import time
import re
from db import save_requests, save_count, check_email, save_user_email
from concurrent.futures import ThreadPoolExecutor
from telegram import Update, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (MessageHandler,
                          filters,
                          ConversationHandler,
                          CallbackQueryHandler,
                          CallbackContext)
from app.scraping.tech import WebScraper
from app.keyboard.inline import keyboard_analyze, parsing_menu


executor = ThreadPoolExecutor(10)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
AWAITING_EMAIL, AWAITING_PRODUCT_NAME = range(2)


async def start_email_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    await context.bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
    await context.bot.send_message(chat_id=chat_id, text="–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
    return AWAITING_PRODUCT_NAME


async def start_email(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_chat.id
    if await check_email(user_id):
        await request_product_name(update, context)
        return AWAITING_PRODUCT_NAME
    else:
        await update.message.reply_text("üëÆ‚Äç‚ôÇÔ∏è–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π EMAIL:\n\n"
                                        "1. –í–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ "
                                        "–¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –Ω–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω —Ç—Ä–µ—Ç—å–∏–º "
                                        "–ª–∏—Ü–∞–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Ü–µ–ª—è—Ö.\n"
                                        "2. –ú—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—É—é –ø–æ—á—Ç—É (—Å–ø–∞–º). "
                                        "–í–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è "
                                        "—Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.\n"
                                        "3. –ú—ã —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥–∏–º –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ "
                                        "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—à–∏–º–∏ –ø–æ–ª–∏—Ç–∏–∫–∞–º–∏ "
                                        "–∏ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –æ –∑–∞—â–∏—Ç–µ –¥–∞–Ω–Ω—ã—Ö.\n\n–í–≤–µ–¥–∏—Ç–µ EMAIL –Ω–∏–∂–µüëá")
        return AWAITING_EMAIL


async def save_email(update: Update, context: CallbackContext) -> int:
    email = update.message.text
    user_id = update.effective_chat.id
    await save_user_email(user_id, email)
    # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è email, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
    return AWAITING_PRODUCT_NAME


async def parsing(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    reply_markup = ReplyKeyboardMarkup(parsing_menu, resize_keyboard=True, one_time_keyboard=False)
    await context.bot.send_message(reply_markup=reply_markup,
                                   chat_id=chat_id,
                                   text="–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤üëá")


async def request_product_name(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
    return AWAITING_PRODUCT_NAME


async def split_message(chat_id, text, context, reply_markup=None, max_length=9300):
    parts = []
    while len(text) > max_length:
        part = text[:max_length]
        last_newline = part.rfind('\n')
        if last_newline != -1:
            parts.append(part[:last_newline])
            text = text[last_newline+1:]
        else:
            parts.append(part)
            text = text[:max_length]
    parts.append(text)

    reply_markup = InlineKeyboardMarkup(keyboard_analyze)

    for i, part in enumerate(parts):
        if i < len(parts) - 1:
            await context.bot.send_message(chat_id=chat_id, text=part, parse_mode='HTML', disable_web_page_preview=True)
        else:
            await context.bot.send_message(chat_id=chat_id, text=part, parse_mode='HTML', disable_web_page_preview=True,
                                           reply_markup=reply_markup)


# –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –∫–Ω–æ–ø–∫–æ–π –ê–ù–ê–õ–ò–ó –¢–û–í–ê–†–ê
async def analyze_product(update: Update, context: CallbackContext) -> int:
    try:
        if not context.bot_data.get('is_bot_active', True):
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω.")

        product_name = update.message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, —É–¥–∞–ª—è—è –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        user_id = update.effective_chat.id
        chat_id = update.effective_chat.id

        # –ó–∞–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_requests(user_id, product_name)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
        await save_count()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        photo_message = await context.bot.send_photo(chat_id=chat_id, photo="https://imgur.com/G1zON7g")
        text_message = await context.bot.send_message(chat_id, "–û–∂–∏–¥–∞–π—Ç–µ. –ò–¥—ë—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω...‚ôªÔ∏è\n"
                                                               "–û–±—ã—á–Ω–æ —ç—Ç–æ –Ω–µ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ 10-15 —Å–µ–∫—É–Ω–¥üòâ")

        scraper = WebScraper()
        loop = asyncio.get_event_loop()
        results = await loop.run_in_executor(None, lambda: perform_parsing(scraper, product_name))

        seen_stores = set()
        unique_results = []
        for store_name, price, link in results:
            if store_name not in seen_stores:
                unique_results.append((store_name, price, link))
                seen_stores.add(store_name)

        response_text = ""
        for index, (store_name, price, link) in enumerate(unique_results, start=1):
            formatted_store_name = store_name.title() if not store_name.isupper() else store_name
            price_numeric = int(re.sub(r'\D', '', price))
            price_formatted = f"{price_numeric:,.0f}".replace(",", ".").strip() + " ‚ÇΩ"
            response_text += f"{index}. {formatted_store_name}: <a href='{link}'>{price_formatted}</a>\n"

        if not response_text:
            response_text = ("–ò–∑–≤–∏–Ω–∏, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Äüòî\n"
                             "–í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–µ–π—á–∞—Å –Ω–µ –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç—Å—è, –Ω–æ —Å–∫–æ—Ä–æ –º—ã —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–ºü´°")

        reply_markup = InlineKeyboardMarkup(keyboard_analyze)

        if len(response_text) > 9300:
            await split_message(chat_id, response_text, context, reply_markup=reply_markup)
        else:
            await context.bot.send_message(chat_id=chat_id, text=response_text, parse_mode='HTML',
                                           disable_web_page_preview=True, reply_markup=reply_markup)

        await context.bot.delete_message(chat_id=chat_id, message_id=photo_message.message_id)
        await context.bot.delete_message(chat_id=chat_id, message_id=text_message.message_id)
        return ConversationHandler.END

    except Exception as e:
        reply_markup = InlineKeyboardMarkup(keyboard_analyze)
        await context.bot.send_message(text="–ò–∑–≤–∏–Ω–∏, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Äüòî\n"
                                            "–í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–µ–π—á–∞—Å –Ω–µ –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç—Å—è, –Ω–æ —Å–∫–æ—Ä–æ –º—ã —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–ºü´°",
                                       chat_id=update.effective_chat.id,
                                       reply_markup=reply_markup)
        return ConversationHandler.END


analyt_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('–¢–µ—Ö–Ω–∏–∫–∞ –∏ –≥–∞–¥–∂–µ—Ç—ãü§ñ'), start_email),
                      CallbackQueryHandler(start_email_callback, pattern='^repeater$')],
        states={
            AWAITING_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_email)],
            AWAITING_PRODUCT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, analyze_product)],
        },
        fallbacks=[],
    )


# –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
def perform_parsing(scraper, product_name):
    scraper.open_page('https://market.yandex.ru/')
    scraper.search_product(product_name)
    time.sleep(6)  # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    results = scraper.find_products()
    time.sleep(6)
    scraper.close_browser()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–∏—Ñ—Ä—ã –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞, —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ
    user_product_numbers_set = set(re.findall(r'\d+', product_name))

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ —É—Å–ª–æ–≤–∏—è
    filtered_results = []
    for store_name, price, link, product_title in results:
        product_numbers_set = set(re.findall(r'\d+', product_title))


        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤ —Ü–∏—Ñ—Ä –∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤ —Å–ª–æ–≤
        if (user_product_numbers_set == product_numbers_set and
                price and link and
                '–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' not in price and
                '–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' not in link):
            filtered_results.append((store_name, price, link))

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Ü–µ–Ω–µ
    sorted_results = sorted(filtered_results,
                            key=lambda x: int(re.sub(r'\D', '', x[1])) if re.sub(r'\D', '',
                                                                                 x[1]).isdigit() else float('inf'))

    return sorted_results